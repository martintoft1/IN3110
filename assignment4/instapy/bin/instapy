#!/usr/bin/env python
import argparse
import sys
import os
import cv2
import instapy as ip

if __name__ == "__main__":
    # Make parser
    parser = argparse.ArgumentParser(description="Use filter on an image from a file")

    # Add flags
    # Add file-flag
    parser.add_argument("-f", "--file", dest="file", metavar="FILE", type=str, help="the filename of file to apply filter to")
    # Add gray-flag
    parser.add_argument("-g", "--gray", action="store_true", help="select gray filter")
    # Add sepia-flag
    parser.add_argument("-se", "--sepia", action="store_true", help="select sepia filter") 
    # Add scale-flag
    parser.add_argument("-sc", "--scale", dest="scale_factor", metavar="SCALE", type=float, help="scale factor to resize image")
    # Add implementation-flag
    parser.add_argument("-i", "--implement", dest="implementation", metavar="{python, numba, numpy}", type=str, help="choose the implementation")
    # Add output-flag
    parser.add_argument("-o", "--out", dest="output", metavar="OUT", type=str, help="the output filename")

    # Parse args
    args = parser.parse_args()

    # Check args and decide what to do

    # Check if filename was given, and if the file exists. If it does, read image
    if args.file:
        if os.path.exists(args.file):
            image = cv2.imread(args.file)
        if not os.path.exists(args.file):
            print(f"Can't find file {args.file}")
            sys.exit()
    else:
        print("Need a filename of file to apply filter to")
        sys.exit()

    # Check if both gray and sepia flag was given as we cant have gray and sepia flag at the same time
    if args.gray and args.sepia: 
        print("Cant use the gray and sepia filter at the same time. Give either the gray-flag or the sepia-flag")
        sys.exit()

    # Check if the file should be scaled
    if args.scale_factor: 
        # Resize image
        image = cv2.resize(image, (0, 0), fx=args.scale_factor, fy=args.scale_factor)

    # Check what filter to apply
    # Gray filter
    if args.gray:
        if not args.implementation:
            print("No implementation given")
        elif args.implementation == "python":
            image = ip.python_color_2_gray.grayscale_filter(image)
            ip.python_color_2_gray.save_image("grayscale", args.file, args.output, image)
        elif args.implementation == "numpy":
            image = ip.numpy_color_2_gray.grayscale_filter(image)
            ip.numpy_color_2_gray.save_image("grayscale", args.file, args.output, image)
        elif args.implementation == "numba":
            image = ip.numba_color_2_gray.grayscale_filter(image)
            ip.numba_color_2_gray.save_image("grayscale", args.file, args.output, image)
        else:
            print(f"There is no implementation named {args.implementation}")
            sys.exit()

    # Sepia filter
    elif args.sepia:
        if args.implementation == "python":
            image = ip.python_color_2_sepia.sepia_filter(image)
            ip.python_color_2_sepia.save_image("sepia", args.file, args.output, image)
        elif args.implementation == "numpy":
            image = ip.numpy_color_2_sepia.sepia_filter(image)
            ip.numpy_color_2_sepia.save_image("sepia", args.file, args.output, image)
        elif args.implementation == "numba":
            image = ip.numba_color_2_sepia.sepia_filter(image)
            ip.numba_color_2_sepia.save_image("sepia", args.file, args.output, image)
        else:
            print(f"There is no implementation named {args.gray}")
            sys.exit()

    # No filter
    else:
        print("No filter given")
        sys.exit()
